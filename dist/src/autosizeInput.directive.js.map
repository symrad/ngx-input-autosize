{"version":3,"sources":["../../src/autosizeInput.directive.ts"],"names":[],"mappings":"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","file":"autosizeInput.directive.js","sourceRoot":"","sourcesContent":["import { NgModel, NgControl } from '@angular/forms';\nimport { AutosizeComponent } from './autosizeInput.component';\nimport { ElementRef, HostListener, Directive, AfterContentChecked, OnInit,\n    ViewChild, ViewContainerRef, ComponentFactoryResolver } from '@angular/core';\n\n\n\nexport class AutosizeDirective implements AfterContentChecked, OnInit {\n    base: number;\n    supportedInputTypes = ['text', 'search', 'tel', 'url', 'email', 'password', 'number'];\n    cssProps = [\n        'fontSize', 'fontFamily', 'fontWeight', 'fontStyle',\n        'letterSpacing', 'textTransform', 'wordSpacing', 'textIndent',\n        'boxSizing', 'borderLeftWidth', 'borderRightWidth', 'borderLeftStyle', 'borderRightStyle',\n        'paddingLeft', 'paddingRight', 'marginLeft', 'marginRight'\n    ];\n    autosizeComponent: AutosizeComponent;\n    placeholderAutoSizeComponent: AutosizeComponent;\n    placeholder: String = '';\n\n     onInput(textArea: HTMLInputElement): void {\n        this.adjust();\n    }\n\n    constructor(\n        private resolver: ComponentFactoryResolver,\n        private element: ElementRef,\n        private vc: ViewContainerRef,\n        private ngControl: NgControl\n    ) {\n\n    }\n\n    ngOnInit() {\n        const factory = this.resolver.resolveComponentFactory(AutosizeComponent);\n        this.autosizeComponent = this.vc.createComponent(factory).instance;\n        this.placeholderAutoSizeComponent = this.vc.createComponent(factory).instance;\n\n        for (const prop of this.cssProps){\n            if (this.element.nativeElement.currentStyle) {\n                this.autosizeComponent.shadowElement.nativeElement.style[prop] = this.element.nativeElement.currentStyle[prop];\n                this.placeholderAutoSizeComponent.shadowElement.nativeElement.style[prop] = this.element.nativeElement.currentStyle[prop];\n            } else if (window.getComputedStyle) {\n                this.autosizeComponent.shadowElement.nativeElement.style[prop] = getComputedStyle(this.element.nativeElement)[<any>prop];\n                // tslint:disable-next-line:max-line-length\n                this.placeholderAutoSizeComponent.shadowElement.nativeElement.style[prop] = getComputedStyle(this.element.nativeElement)[<any>prop];\n            }\n        }\n        if (this.element.nativeElement.placeholder) {\n            this.placeholder = this.element.nativeElement.placeholder;\n        }\n\n        if (this.ngControl.valueChanges) {\n            this.ngControl.valueChanges.subscribe(response => {\n                this.autosizeComponent.autosizeValue = response;\n                this.placeholderAutoSizeComponent.autosizeValue = this.placeholder;\n            });\n        }\n    }\n\n    ngAfterContentChecked(): void {\n        this.adjust();\n    }\n\n    adjust(): void {\n        if (this.placeholderAutoSizeComponent.el.nativeElement.offsetWidth >= this.autosizeComponent.el.nativeElement.offsetWidth\n            && !this.ngControl.value) {\n            this.element.nativeElement.style.width = this.placeholderAutoSizeComponent.el.nativeElement.offsetWidth + 'px';\n        } else {\n            this.element.nativeElement.style.width = this.autosizeComponent.el.nativeElement.offsetWidth + 'px';\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'input[autosize]'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ComponentFactoryResolver, },\n{type: ElementRef, },\n{type: ViewContainerRef, },\n{type: NgControl, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'onInput': [{ type: HostListener, args: ['input', ['$event.target'], ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}